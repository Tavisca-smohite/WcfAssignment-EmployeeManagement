//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18063
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EmployeeTestLibrary.ServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Employee", Namespace="http://schemas.datacontract.org/2004/07/EmployeeService")]
    [System.SerializableAttribute()]
    public partial class Employee : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime RemarkDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] RemarkTextField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime RemarkDate {
            get {
                return this.RemarkDateField;
            }
            set {
                if ((this.RemarkDateField.Equals(value) != true)) {
                    this.RemarkDateField = value;
                    this.RaisePropertyChanged("RemarkDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] RemarkText {
            get {
                return this.RemarkTextField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarkTextField, value) != true)) {
                    this.RemarkTextField = value;
                    this.RaisePropertyChanged("RemarkText");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.ICreateEmployeeService")]
    public interface ICreateEmployeeService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICreateEmployeeService/CreateEmployee", ReplyAction="http://tempuri.org/ICreateEmployeeService/CreateEmployeeResponse")]
        string CreateEmployee(EmployeeTestLibrary.ServiceReference.Employee e);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICreateEmployeeService/CreateEmployee", ReplyAction="http://tempuri.org/ICreateEmployeeService/CreateEmployeeResponse")]
        System.Threading.Tasks.Task<string> CreateEmployeeAsync(EmployeeTestLibrary.ServiceReference.Employee e);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICreateEmployeeService/AddRemarks", ReplyAction="http://tempuri.org/ICreateEmployeeService/AddRemarksResponse")]
        string AddRemarks(int id, string remarks);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICreateEmployeeService/AddRemarks", ReplyAction="http://tempuri.org/ICreateEmployeeService/AddRemarksResponse")]
        System.Threading.Tasks.Task<string> AddRemarksAsync(int id, string remarks);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICreateEmployeeServiceChannel : EmployeeTestLibrary.ServiceReference.ICreateEmployeeService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CreateEmployeeServiceClient : System.ServiceModel.ClientBase<EmployeeTestLibrary.ServiceReference.ICreateEmployeeService>, EmployeeTestLibrary.ServiceReference.ICreateEmployeeService {
        
        public CreateEmployeeServiceClient() {
        }
        
        public CreateEmployeeServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CreateEmployeeServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CreateEmployeeServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CreateEmployeeServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string CreateEmployee(EmployeeTestLibrary.ServiceReference.Employee e) {
            return base.Channel.CreateEmployee(e);
        }
        
        public System.Threading.Tasks.Task<string> CreateEmployeeAsync(EmployeeTestLibrary.ServiceReference.Employee e) {
            return base.Channel.CreateEmployeeAsync(e);
        }
        
        public string AddRemarks(int id, string remarks) {
            return base.Channel.AddRemarks(id, remarks);
        }
        
        public System.Threading.Tasks.Task<string> AddRemarksAsync(int id, string remarks) {
            return base.Channel.AddRemarksAsync(id, remarks);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IRetrieveEmployeeService")]
    public interface IRetrieveEmployeeService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetrieveEmployeeService/GetEmployees", ReplyAction="http://tempuri.org/IRetrieveEmployeeService/GetEmployeesResponse")]
        EmployeeTestLibrary.ServiceReference.Employee[] GetEmployees();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetrieveEmployeeService/GetEmployees", ReplyAction="http://tempuri.org/IRetrieveEmployeeService/GetEmployeesResponse")]
        System.Threading.Tasks.Task<EmployeeTestLibrary.ServiceReference.Employee[]> GetEmployeesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetrieveEmployeeService/SearchById", ReplyAction="http://tempuri.org/IRetrieveEmployeeService/SearchByIdResponse")]
        EmployeeTestLibrary.ServiceReference.Employee SearchById(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetrieveEmployeeService/SearchById", ReplyAction="http://tempuri.org/IRetrieveEmployeeService/SearchByIdResponse")]
        System.Threading.Tasks.Task<EmployeeTestLibrary.ServiceReference.Employee> SearchByIdAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetrieveEmployeeService/SearchByName", ReplyAction="http://tempuri.org/IRetrieveEmployeeService/SearchByNameResponse")]
        EmployeeTestLibrary.ServiceReference.Employee SearchByName(string Name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetrieveEmployeeService/SearchByName", ReplyAction="http://tempuri.org/IRetrieveEmployeeService/SearchByNameResponse")]
        System.Threading.Tasks.Task<EmployeeTestLibrary.ServiceReference.Employee> SearchByNameAsync(string Name);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRetrieveEmployeeServiceChannel : EmployeeTestLibrary.ServiceReference.IRetrieveEmployeeService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveEmployeeServiceClient : System.ServiceModel.ClientBase<EmployeeTestLibrary.ServiceReference.IRetrieveEmployeeService>, EmployeeTestLibrary.ServiceReference.IRetrieveEmployeeService {
        
        public RetrieveEmployeeServiceClient() {
        }
        
        public RetrieveEmployeeServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RetrieveEmployeeServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RetrieveEmployeeServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RetrieveEmployeeServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public EmployeeTestLibrary.ServiceReference.Employee[] GetEmployees() {
            return base.Channel.GetEmployees();
        }
        
        public System.Threading.Tasks.Task<EmployeeTestLibrary.ServiceReference.Employee[]> GetEmployeesAsync() {
            return base.Channel.GetEmployeesAsync();
        }
        
        public EmployeeTestLibrary.ServiceReference.Employee SearchById(int Id) {
            return base.Channel.SearchById(Id);
        }
        
        public System.Threading.Tasks.Task<EmployeeTestLibrary.ServiceReference.Employee> SearchByIdAsync(int Id) {
            return base.Channel.SearchByIdAsync(Id);
        }
        
        public EmployeeTestLibrary.ServiceReference.Employee SearchByName(string Name) {
            return base.Channel.SearchByName(Name);
        }
        
        public System.Threading.Tasks.Task<EmployeeTestLibrary.ServiceReference.Employee> SearchByNameAsync(string Name) {
            return base.Channel.SearchByNameAsync(Name);
        }
    }
}
